{"version":3,"file":"component---src-pages-postinglist-[name]-tsx-72bd9bdd5fe3abf8d64e.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/styles/them.ts","webpack://my-gatsby-site/./src/styles/globalStyle.ts","webpack://my-gatsby-site/./src/components/commonElements/StyledToggle.ts","webpack://my-gatsby-site/./src/components/commonElements/Toggle.tsx","webpack://my-gatsby-site/./src/components/layouts/Header.tsx","webpack://my-gatsby-site/./src/components/layouts/Layout.tsx","webpack://my-gatsby-site/./src/components/layouts/Main.tsx","webpack://my-gatsby-site/./src/hooks/usePostingList.ts","webpack://my-gatsby-site/./src/components/styledComponents/postingList/StyledPostingList.ts","webpack://my-gatsby-site/./src/components/postingList/element/GridList.tsx","webpack://my-gatsby-site/./src/components/postingList/element/GridTitle.tsx","webpack://my-gatsby-site/./src/components/styledComponents/Styled.ts","webpack://my-gatsby-site/./src/components/postingList/element/GridRightTitle.tsx","webpack://my-gatsby-site/./src/components/postingList/molecules/GridRight.tsx","webpack://my-gatsby-site/./src/components/postingList/organisms/PostingContainer.tsx","webpack://my-gatsby-site/./src/components/postingList/PostingList.tsx","webpack://my-gatsby-site/./src/pages/postinglist/[name].tsx","webpack://my-gatsby-site/./src/recoil/PostingListParamName.ts","webpack://my-gatsby-site/./src/recoil/Theme.ts"],"sourcesContent":["const margins = {\n    sm: \".5rem\",\n    base: \"1rem\",\n    lg: \"2rem\",\n    xl: \"3rem\",\n  };\n  \n  const paddings = {\n    sm: \".5rem\",\n    base: \"1rem\",\n    lg: \"2rem\",\n    xl: \"3rem\", \n  };\n  \n  const fonts = {\n    size: {\n        xsm: \"1rem\",\n        sm: \"1.4rem\",\n        base: \"1.6rem\",\n        lg: \"2rem\",\n        xl: \"2.5rem\",\n        xxl: \"5rem\",\n        title: \"6rem\",\n      },\n      weight: {\n        light: 100,\n        normal: 400,\n        bold: 700,\n      }\n  };\n\n  const size = {\n    mobile: \"425px\",\n    mobileS : \"320px\",\n    tablet: \"768px\",\n    desktopL: \"1440px\",\n  };\n  \n  const device = {\n    mobile: `@media only screen and (max-width: ${size.mobile})`,\n    mobileS: `@media only screen and (max-width: ${size.mobileS})`,\n    tablet: `@media only screen and (max-width: ${size.tablet})`,\n    desktopL: `@media only screen and (max-width: ${size.desktopL})`,\n  };\n\n  const commonColors = {\n    white: \"#ffffff\",\n    black: \"#000000\"\n  }\n\n  const lightColors = {\n    background: \"#ebe8dd\",\n    defaultColor: \"#000000\",\n    pointColor: \"#53b948\",\n    gradientColor: \"radial-gradient(closest-side at 49%,rgba(229, 177, 215, 0.5), rgba(146, 173, 207, 0.5),transparent)\",\n    titleSparkColor: \"#7ed957\",\n    textColor: \"#000000\" \n  }\n\n  const darkColors = {\n    background: \"#231f20\",\n    defaultColor: \"#ffd8ea\",\n    pointColor: \"#35755c\",\n    gradientColor: \"radial-gradient(closest-side at 49%,rgba(207, 158, 53, 0.5),rgba(216, 177, 87, 0.3),transparent)\",\n    titleSparkColor: \"#549179\",\n    textColor: \"#edebeb\" \n  }\n\n  export type MarginTypes = typeof margins;\n  export type PaddingTypes = typeof paddings;\n  export type FontsTypes = typeof fonts;\n  export type DeviceTypes = typeof device;\n  export type ColorTypes = typeof lightColors | typeof darkColors;\n  export type CommonColorTypes = typeof commonColors;\n\n  const DefaultTheme = {\n    margins,\n    paddings,\n    fonts,\n    device,\n    commonColors,\n  }\n\n  export const LightTheme = {\n    ...DefaultTheme,\n    colors: lightColors,\n  };\n\n  export const DarkTheme = {\n    ...DefaultTheme,\n    colors: darkColors,\n  };\n  ","import { createGlobalStyle, css } from \"styled-components\";\n\nconst GlobalStyle = createGlobalStyle`\n    ${({theme}) => {\n        const {colors} = theme;\n        return css`\n            body {\n                background: ${colors.background};\n            }\n        `\n    }}\n`;\n\nexport default GlobalStyle;","import styled, {css} from \"styled-components\";\n\nconst CustomToggleSwitch = styled.div`\n    position: absolute;\n    width: 100px;\n    height: 100px;\n    right: 4rem;\n    bottom: -2.5rem;\n`\n\nconst CustomToggleLabel = styled.label`\n    ${({theme}) => {\n\n        const {colors} = theme;\n\n        return css`\n            position: absolute;\n            width: 80%;\n            height: 40px;\n            background-color: inherit;\n            border-radius: 50px;\n            border: 1px solid ${colors.textColor};\n            cursor: pointer;\n        `\n    }}\n`\n\nconst CustomToggleInput = styled.input.attrs({ type: \"checkbox\" })`\n    position: absolute;\n    display:none;\n`\n\nconst CustomSpanSlider = styled.span`\n    position: absolute;\n    width: 50%;\n    height: 50%;\n    border-radius: 50px;\n    transition: 0.3s;\n\n    &:before{\n        content: \"\";\n        position: absolute;\n        top: 7px;\n        left: 5px;\n        width: 30px;\n        height: 27px;\n        border-radius: 50%;\n        box-shadow: inset 15px -1px 0px 0px ${({theme}) => theme.colors.textColor};\n        background-color: inherit;\n        transition: 0.3s;\n    }\n\n    &:after{\n        content: \"DARK\";\n        width: 100px;\n        height: 42px;\n        display: table-cell;\n        vertical-align: middle;\n        text-align: end;\n        padding-left: 37px;\n        color: ${({theme}) => theme.colors.textColor};\n        font-size: 10px;\n    }\n\n    ${CustomToggleInput}:checked + &:before{\n        transform: translateX(39px);\n        background-color: ${({theme}) => theme.colors.textColor};\n        box-shadow: none;\n        height: 30px;\n        top: 5px;\n    }\n\n    ${CustomToggleInput}:checked + &:after{\n        content: \"LIGHT\";\n        padding-left: 0;\n    }\n    \n`\n\nexport const StyledToggle = {\n    CustomToggleSwitch,\n    CustomToggleLabel,\n    CustomToggleInput,\n    CustomSpanSlider\n}","import React, {useCallback} from \"react\";\nimport { ThemeEnums, themeMode } from \"../../recoil/Theme\";\nimport {\n    useRecoilState\n  } from 'recoil';\nimport { StyledToggle } from \"./StyledToggle\";\n\n\n\nconst {CustomToggleSwitch, CustomToggleLabel, CustomToggleInput, CustomSpanSlider} = StyledToggle;\n\nconst Toggle = () => {\n\n    const [themeType, setThemeType] = useRecoilState<ThemeEnums>(themeMode);\n    \n        const modeTest = useCallback(():void => {\n\n\n                if(themeType === ThemeEnums.DARK) {\n                    localStorage.setItem('theme', ThemeEnums.LIGHT.toString());\n                    setThemeType(ThemeEnums.LIGHT);\n                    return\n                }\n        \n                localStorage.setItem('theme', ThemeEnums.DARK.toString());\n                setThemeType(ThemeEnums.DARK);\n    \n            \n    \n        },[setThemeType, themeType, ThemeEnums.DARK, ThemeEnums.LIGHT]);\n\n\n    \n\n    return(\n        <CustomToggleSwitch>\n            <CustomToggleLabel>\n                <CustomToggleInput onChange={ modeTest }></CustomToggleInput>\n                <CustomSpanSlider> \n                </CustomSpanSlider>\n            </CustomToggleLabel>\n        </CustomToggleSwitch>\n    )\n}\n\nexport default Toggle;","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport styled, {css} from \"styled-components\";\nimport Toggle from \"../commonElements/Toggle\";\n\ntype props = {\n    title: string\n}\n\nconst CustomHeader = styled.div`\n    ${({theme}) => {\n        const {colors} = theme;\n        return css`\n            position: fixed;\n            width: 100%;\n            top: 0;\n            font-family: AgrandirGrandLight;\n            padding: 30px;\n            border-bottom: 1px solid ${colors.textColor};\n            background: ${colors.background};\n            z-index: 999;\n\n            a {\n                color: ${colors.textColor};\n            }\n        `\n    }}\n    \n`\n\nconst Header = ({title}:props) => {\n    return(\n        <CustomHeader>\n            <Link to={'/'}>{title}</Link>\n            <Toggle></Toggle>\n        </CustomHeader>\n    )\n}\n\nexport default Header;","import React from \"react\";\nimport { DarkTheme, LightTheme } from \"../../styles/them\";\nimport styled, {ThemeProvider} from \"styled-components\";\nimport GlobalStyle from \"../../styles/globalStyle\";\nimport Header from \"./Header\";\nimport { useRecoilValue, RecoilRoot } from \"recoil\";\nimport { ThemeEnums, themeMode } from \"../../recoil/Theme\";\n\n// #ece8dd\n\ntype Props = {\n    children?: React.ReactNode | React.ReactNode[];\n};\n\nconst CustomLayout = styled.div`\n    height: auto;\n    overflow: hidden;\n`\n\nconst Layout = ({children}:Props) => {\n\n    const theme =  useRecoilValue(themeMode);\n\n    console.log(theme);\n    if (typeof window === 'undefined') console.log('Window is not there')\n\n    return(\n        <ThemeProvider theme={  theme === ThemeEnums.LIGHT ? LightTheme : DarkTheme }>\n        <GlobalStyle />\n            <CustomLayout>\n                <Header title=\"SUWON's BLOG\"></Header>\n                {children}\n            </CustomLayout>\n            </ThemeProvider>\n    )\n}\n\nexport default Layout;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ntype PropsType = {\n    children?: React.ReactNode[] | React.ReactNode;\n    height: string;\n};\n\ninterface MainHeight {\n    height: string;\n}\n\n// display:flex;\n// justify-content: space-around;\nconst CustomMain = styled.div<MainHeight>`\n    max-width:100%;\n    height: auto;\n    margin-top: 3rem;\n`   \n\nconst Main = ({children, height} : PropsType) => {\n    return(\n        <CustomMain height={height}>\n            {children}\n        </CustomMain>\n    )\n}\n\nexport default Main;","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport type PostingListType = {\n    frontmatter: {\n        parentFolder : string,\n        title: string,\n        slug: string\n    },\n    id: string;\n}\n\nexport const usePostingList = (parentFolder: string) => {\n    const { allMarkdownRemark } = useStaticQuery(\n      graphql`\n        query AllMarkDownRemark {\n            allMarkdownRemark {\n                nodes {\n                  frontmatter {\n                    parentFolder\n                    title\n                    slug\n                  }\n                  id\n                }\n              }\n        }\n      `\n    )\n\n    const filteredData = allMarkdownRemark.nodes.filter(\n        (data:PostingListType) => data.frontmatter.parentFolder === parentFolder\n    )\n\n    return filteredData;\n}\n","import styled, {css} from \"styled-components\";\nimport { ThemeEnums } from \"../../../recoil/Theme\";\nimport {CustomGridRightProps, ThemeProps} from \"../StyledType\";\n\n\nconst CustomGridDiv = styled.div`\n    ${({theme}) => {\n\n        const {colors, device} = theme;\n\n        return css`\n            height: 100%;\n            border-right: solid ${colors.defaultColor};\n\n            ${device.mobile} {\n                border: none;\n                background: #2d2d2d;\n\n                a{\n                    color: white;\n                }\n            }\n        `\n    }}\n\n`\n\nconst CustomGridList = styled.div`\n    ${({theme}) => {\n\n        const {paddings, device, colors} = theme;\n\n        return css`\n            overflow: scroll;\n            height: 80%;\n\n            & .list {\n                font-size: large;\n                padding: ${paddings.base};\n                \n                a{\n                    color: ${colors.textColor};\n\n                    &:hover{\n                        text-decoration:underline;\n                    }\n                }\n            }\n        `\n    }}\n`\n\nconst CustomGridRightTitle = styled.div<CustomGridRightProps>`\n\n    transform-origin: ${props => props.transform};\n    position: ${props => props.position};\n    text-align: ${props => props.textAlign};\n\n    ${({theme}) => {\n\n        const {device, fonts, colors} = theme;\n\n        return css`\n            transform: scaleY(2.5);\n            bottom: 0;\n            font-size: ${fonts.size.xl};\n\n            @media(max-height: 650px) {\n                transform: scaleY(1.5);\n                font-size: ${fonts.size.lg};\n            }\n\n            ${device.mobile} {\n                transform: scaleY(2);\n                font-size: ${fonts.size.sm};\n            }\n        `\n    }}\n`\n\nconst CustomLanguageName = styled.div`\n    ${({theme}) => {\n\n        const {colors} = theme;\n\n        return css`\n            word-break: break-all;\n            color: ${colors.pointColor};\n            transform: scale(1); \n        `\n    }}   \n`\n\n\nconst CustomGridTitle = styled.div<ThemeProps>`\n\n    color:  ${(props) => props.mode === ThemeEnums.LIGHT ? 'white' : 'black'};\n\n    ${({theme}) => {\n        \n        const {colors, fonts, paddings, device} = theme;\n\n        return css`\n            background: ${colors.defaultColor};\n            border-right: solid 1px ${colors.defaultColor};\n            font-family: AgrandirGrandHeavy;\n            font-size: ${fonts.size.xl};\n            padding: ${paddings.base};\n\n            ${device.mobile} {\n                display: none;\n            }\n        `\n    }}\n`\n\n\nconst CustomGridRight = styled.div`\n    ${({theme}) => {\n\n        const {fonts, paddings, device, colors} = theme;\n\n        return css`\n            position: relative;\n            height: 100%;\n            grid-template-rows: repeat(2, 1fr);\n            font-family: AgrandirGrandHeavy;\n            grid-auto-rows: auto;\n            font-size: 3rem;\n            justify-items: end;\n            padding: 0 ${paddings.base};\n            align-self: center;\n            color: ${colors.textColor};\n\n    \n            ${device.tablet} {\n                font-size: ${fonts.size.xl};\n            }\n\n            ${device.tablet} {\n                font-size: ${fonts.size.sm};\n            }\n            \n        `\n    }}\n`\n\nconst CustomGridGradient = styled.div`\n    grid-row: auto / span 2;\n    height: 100%;\n\n    &.dark{\n        background: radial-gradient(circle,rgb(233 255 233 / 77%) 0%,rgb(58 67 54 / 17%) 47%,rgb(255 255 255 / 0%) 100%);\n    }\n\n    &.light{\n        background: radial-gradient(circle,rgb(50 236 50 / 77%) 0%,rgb(58 67 54 / 17%) 47%,rgb(255 255 255 / 0%) 100%);\n    }\n`\n\nconst CustomPostingContainer = styled.div`\n\n    ${({theme}) => {\n\n        const {colors, device} = theme;\n\n        return css`\n            width: 90%;\n            border: solid ${colors.defaultColor};\n            height: 70%;\n            display: grid;\n            grid-template-rows: 1fr 7fr;\n            grid-template-columns: 1fr 1fr;\n\n            & .gradationBox {\n                grid-row: auto / span 2;\n                height: 100%;\n                background: radial-gradient(circle,rgb(50 236 50 / 77%) 0%,rgb(58 67 54 / 17%) 47%,rgb(255 255 255 / 0%) 100%);\n            }\n\n            ${device.mobile} {\n                display: flex;\n                flex-direction: column;\n\n                & .gradationBox{\n                    padding: 20px;\n                    grid-row: none;\n                    height: 70%;\n                }\n            }\n\n            \n        `\n    }}\n    \n`\n\nconst CustomPostingList = styled.div`\n    ${({theme}) => {\n\n        const {colors} = theme;\n\n        return css`\n            width: 80%;\n            height: 100vh;\n            position: relative;\n            margin: 0 auto;\n            top: 10%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        `\n    }}\n`\n\n\nexport const StyledPostingList = {\n    elements: {\n        CustomGridDiv,\n        CustomGridList,\n        CustomGridRightTitle,\n        CustomGridTitle,\n        CustomLanguageName\n    },\n    molecules: {\n        CustomGridRight,\n        CustomGridGradient\n    },\n    organisms:{\n        CustomPostingContainer\n    },\n    CustomPostingList\n}","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { PostingListType, usePostingList } from \"../../../hooks/usePostingList\";\nimport { parameterNameState } from \"../../../recoil/PostingListParamName\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\n\n\nconst {CustomGridDiv, CustomGridList} = StyledPostingList.elements;\n\nconst GridList = () => {\n\n    const paramNameRecoil:string = useRecoilValue(parameterNameState);\n    const datas:PostingListType[] = usePostingList(paramNameRecoil);\n    \n\n    return (\n        <CustomGridDiv>\n            <CustomGridList>\n                {\n                    datas.map((data:PostingListType, index:number) => (\n                        <div key={index} className={'list'}>\n                            <Link to={`${data.frontmatter.slug}`}>\n                                {data.frontmatter.title}\n                            </Link>\n                        </div>\n                    ))\n                }\n            </CustomGridList>\n        </CustomGridDiv>\n    )\n}\n\nexport default GridList;\n","import React from \"react\";\nimport { ThemeEnums, themeMode } from \"../../../recoil/Theme\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport {useRecoilValue} from \"recoil\";\n\nconst {CustomGridTitle} = StyledPostingList.elements;\n\nconst GridTitle = () => {\n\n    const theme:ThemeEnums = useRecoilValue(themeMode);\n\n    return (\n        <CustomGridTitle mode={theme}>LIST</CustomGridTitle>\n    )\n}\n\nexport default GridTitle;","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props {\n    [propName: string]: string;\n}\n\n\nexport const CustomDiv = styled.div<Props>`\n    ${props => props};\n`","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { parameterNameState } from \"../../../recoil/PostingListParamName\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport { CustomDiv } from \"../../styledComponents/Styled\";\n\nconst {CustomGridRightTitle, CustomLanguageName} = StyledPostingList.elements;\n\n\nconst GridRightTitle = () => {\n\n    const name:string = useRecoilValue(parameterNameState);\n\n    return(\n        <>\n        <CustomGridRightTitle transform=\"top\" textAlign=\"end\">\n                <CustomDiv>WHAT I</CustomDiv>\n                <CustomDiv>\n                    LEARNED\n                </CustomDiv>\n        </CustomGridRightTitle>\n        <CustomGridRightTitle transform=\"bottom\" position=\"absolute\">\n            <CustomDiv>FROM</CustomDiv>\n            <CustomLanguageName>\n                {name.toUpperCase()}\n            </CustomLanguageName>\n        </CustomGridRightTitle>\n        </>\n    )\n}\n\nexport default GridRightTitle;","import React from \"react\";\nimport { ThemeEnums, themeMode } from \"../../../recoil/Theme\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport GridRightTitle from \"../element/GridRightTitle\";\nimport {useRecoilValue} from \"recoil\";\n\nconst {CustomGridRight, CustomGridGradient} = StyledPostingList.molecules;\n\nconst GridRight = () => {\n\n    const theme:ThemeEnums = useRecoilValue(themeMode);\n\n    return(\n        <CustomGridGradient className={theme === ThemeEnums.LIGHT ? 'light' : 'dark'}>\n            <CustomGridRight>\n            <GridRightTitle />\n            </CustomGridRight>\n        </CustomGridGradient>\n    )\n}\n\nexport default GridRight;\n","import React from \"react\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport GridList from \"../element/GridList\";\nimport GridTitle from \"../element/GridTitle\";\nimport GridRight from \"../molecules/GridRight\";\n\nconst {CustomPostingContainer} = StyledPostingList.organisms;\n\nconst PostingContainer = () => {\n\n    return (\n        <CustomPostingContainer>\n            <GridTitle></GridTitle>\n            <GridRight></GridRight>\n            <GridList></GridList>\n        </CustomPostingContainer>\n    )\n}\n\n\nexport default PostingContainer;","import React from \"react\";\nimport { StyledPostingList } from \"../styledComponents/postingList/StyledPostingList\";\nimport PostingContainer from \"./organisms/PostingContainer\";\n\nconst {CustomPostingList} = StyledPostingList;\n\nconst PostingList = () => {\n\n    return(\n        <CustomPostingList>\n             <PostingContainer></PostingContainer>\n        </CustomPostingList>\n    )\n}\n\nexport default PostingList;","import * as React from \"react\";\nimport { RecoilRoot, useRecoilState } from \"recoil\";\nimport Layout from \"../../components/layouts/Layout\";\nimport Main from \"../../components/layouts/Main\";\nimport PostingList from \"../../components/postingList/PostingList\";\nimport { parameterNameState } from \"../../recoil/PostingListParamName\";\n\ntype PropsType = {\n    params: {name: string},\n}\n\n\nconst PostingListIndexPage = ({ params }:PropsType) => {\n    const {name} = params;\n\n    const [paramName, setParamName] = useRecoilState(parameterNameState);\n    \n    React.useEffect(()=>{\n        setParamName(name);\n    })\n\n\n    return(\n        <Layout>\n            <Main height={'100vh'}>\n                <PostingList />\n            </Main>\n            </Layout>\n    )\n}\n\n\n\nexport default PostingListIndexPage;","import {atom, selector} from \"recoil\";\n\nexport const parameterNameState = atom({\n    key: 'parameterName',\n    default: ''\n});\n","import {atom} from \"recoil\";\n\nexport enum ThemeEnums {\n    LIGHT = 0,\n    DARK = 1,\n};\n\nconst isBrowser = typeof window !== \"undefined\"\n\nexport const getTheme = ():ThemeEnums => {\n    var stotage;\n    if(isBrowser) {\n        stotage = localStorage.getItem('theme');\n        const theme: number = Number(stotage);\n\n        if(theme === ThemeEnums.DARK) {\n            return ThemeEnums.DARK;\n        }\n    }\n\n    return ThemeEnums.LIGHT;\n    \n}\n\nexport const themeMode = atom<ThemeEnums>({\n    key: 'themeMode',\n    default: getTheme(),\n})"],"names":["DefaultTheme","margins","sm","base","lg","xl","paddings","fonts","size","xsm","xxl","title","weight","light","normal","bold","device","mobile","mobileS","tablet","desktopL","commonColors","white","black","LightTheme","colors","background","defaultColor","pointColor","gradientColor","titleSparkColor","textColor","DarkTheme","createGlobalStyle","theme","css","CustomToggleSwitch","styled","CustomToggleLabel","CustomToggleInput","type","withConfig","StyledToggle","CustomSpanSlider","useRecoilState","themeMode","themeType","setThemeType","modeTest","useCallback","ThemeEnums","localStorage","setItem","React","onChange","CustomHeader","Link","to","Toggle","CustomLayout","children","useRecoilValue","console","log","window","ThemeProvider","GlobalStyle","Header","CustomMain","height","usePostingList","parentFolder","useStaticQuery","allMarkdownRemark","nodes","filter","data","frontmatter","CustomGridDiv","CustomGridList","CustomGridRightTitle","props","transform","position","textAlign","CustomLanguageName","StyledPostingList","elements","CustomGridTitle","mode","molecules","CustomGridRight","CustomGridGradient","organisms","CustomPostingContainer","CustomPostingList","paramNameRecoil","parameterNameState","datas","map","index","key","className","slug","CustomDiv","name","toUpperCase","GridRightTitle","GridTitle","GridRight","GridList","PostingContainer","params","setParamName","Layout","Main","PostingList","atom","default","isBrowser","stotage","getItem","Number","DARK","LIGHT","getTheme"],"sourceRoot":""}