{"version":3,"file":"component---src-pages-postinglist-[name]-tsx-7c34706440a55b7b9ebb.js","mappings":"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","sources":["webpack://my-gatsby-site/./src/components/layouts/Main.tsx","webpack://my-gatsby-site/./src/hooks/usePostingList.ts","webpack://my-gatsby-site/./src/components/styledComponents/postingList/StyledPostingList.ts","webpack://my-gatsby-site/./src/components/postingList/element/GridList.tsx","webpack://my-gatsby-site/./src/components/postingList/element/GridTitle.tsx","webpack://my-gatsby-site/./src/components/styledComponents/Styled.ts","webpack://my-gatsby-site/./src/components/postingList/element/GridRightTitle.tsx","webpack://my-gatsby-site/./src/components/postingList/molecules/GridRight.tsx","webpack://my-gatsby-site/./src/components/postingList/organisms/PostingContainer.tsx","webpack://my-gatsby-site/./src/components/postingList/PostingList.tsx","webpack://my-gatsby-site/./src/pages/postinglist/[name].tsx","webpack://my-gatsby-site/./src/recoil/PostingListParamName.ts"],"sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\ntype PropsType = {\n    children?: React.ReactNode[] | React.ReactNode;\n    height: string;\n};\n\ninterface MainHeight {\n    height: string;\n}\n\n// display:flex;\n// justify-content: space-around;\nconst CustomMain = styled.div<MainHeight>`\n    max-width:100%;\n    height: auto;\n    margin-top: 3rem;\n`   \n\nconst Main = ({children, height} : PropsType) => {\n    return(\n        <CustomMain height={height}>\n            {children}\n        </CustomMain>\n    )\n}\n\nexport default Main;","import {useStaticQuery, graphql} from \"gatsby\";\n\nexport type PostingListType = {\n    frontmatter: {\n        parentFolder : string,\n        title: string,\n        slug: string\n    },\n    id: string;\n}\n\nexport const usePostingList = (parentFolder: string) => {\n    const { allMarkdownRemark } = useStaticQuery(\n      graphql`\n        query AllMarkDownRemark {\n            allMarkdownRemark {\n                nodes {\n                  frontmatter {\n                    parentFolder\n                    title\n                    slug\n                  }\n                  id\n                }\n              }\n        }\n      `\n    )\n\n    const filteredData = allMarkdownRemark.nodes.filter(\n        (data:PostingListType) => data.frontmatter.parentFolder === parentFolder\n    )\n\n    return filteredData;\n}\n","import styled, {css} from \"styled-components\";\nimport { ThemeEnums } from \"../../../recoil/Theme\";\nimport {CustomGridRightProps, ThemeProps} from \"../StyledType\";\n\n\nconst CustomGridDiv = styled.div`\n    ${({theme}) => {\n\n        const {colors, device} = theme;\n\n        return css`\n            height: 100%;\n            border-right: solid ${colors?.defaultColor};\n\n            ${device?.mobile} {\n                border: none;\n                background: #2d2d2d;\n\n                a{\n                    color: white;\n                }\n            }\n        `\n    }}\n\n`\n\nconst CustomGridList = styled.div`\n    ${({theme}) => {\n\n        const {paddings, colors} = theme;\n\n        return css`\n            overflow: scroll;\n            height: 95%;\n\n            & .list {\n                font-size: large;\n                padding: ${paddings?.base};\n                \n                a{\n                    color: ${colors?.textColor};\n\n                    &:hover{\n                        text-decoration:underline;\n                    }\n                }\n            }\n        `\n    }}\n`\n\nconst CustomGridRightTitle = styled.div<CustomGridRightProps>`\n\n    transform-origin: ${props => props.transform};\n    position: ${props => props.position};\n    text-align: ${props => props.textAlign};\n\n    ${({theme}) => {\n\n        const {device, fonts, colors} = theme;\n\n        return css`\n            transform: scaleY(2.5);\n            bottom: 0;\n            font-size: ${fonts.size?.xl};\n\n            @media(max-height: 650px) {\n                transform: scaleY(1.5);\n                font-size: ${fonts.size?.lg};\n            }\n\n            ${device.mobile} {\n                transform: scaleY(2);\n                font-size: ${fonts.size?.sm};\n            }\n        `\n    }}\n`\n\nconst CustomLanguageName = styled.div`\n    ${({theme}) => {\n\n        const {colors} = theme;\n\n        return css`\n            word-break: break-all;\n            color: ${colors?.pointColor};\n            transform: scale(1); \n        `\n    }}   \n`\n\n\nconst CustomGridTitle = styled.div<ThemeProps>`\n\n    color:  ${(props) => props.mode === ThemeEnums.LIGHT ? 'white' : 'black'};\n\n    ${({theme}) => {\n        \n        const {colors, fonts, paddings, device} = theme;\n\n        return css`\n            background: ${colors?.defaultColor};\n            border-right: solid 1px ${colors?.defaultColor};\n            font-family: AgrandirGrandHeavy;\n            font-size: ${fonts?.size.xl};\n            padding: ${paddings?.base};\n\n            ${device?.mobile} {\n                display: none;\n            }\n        `\n    }}\n`\n\n\nconst CustomGridRight = styled.div`\n    ${({theme}) => {\n\n        const {fonts, paddings, device, colors} = theme;\n\n        return css`\n            position: relative;\n            height: 100%;\n            grid-template-rows: repeat(2, 1fr);\n            font-family: AgrandirGrandHeavy;\n            grid-auto-rows: auto;\n            font-size: 3rem;\n            justify-items: end;\n            padding: 0 ${paddings?.base};\n            align-self: center;\n            color: ${colors?.textColor};\n\n    \n            ${device?.tablet} {\n                font-size: ${fonts?.size.xl};\n            }\n\n            ${device?.tablet} {\n                font-size: ${fonts?.size.sm};\n            }\n            \n        `\n    }}\n`\n\nconst CustomGridGradient = styled.div`\n    grid-row: auto / span 2;\n    height: 100%;\n\n    &.dark{\n        background: radial-gradient(circle,rgb(233 255 233 / 77%) 0%,rgb(58 67 54 / 17%) 47%,rgb(255 255 255 / 0%) 100%);\n    }\n\n    &.light{\n        background: radial-gradient(circle,rgb(50 236 50 / 77%) 0%,rgb(58 67 54 / 17%) 47%,rgb(255 255 255 / 0%) 100%);\n    }\n`\n\nconst CustomPostingContainer = styled.div`\n\n    ${({theme}) => {\n\n        const {colors, device} = theme;\n\n        return css`\n            width: 90%;\n            border: solid ${colors?.defaultColor};\n            height: 70%;\n            display: grid;\n            grid-template-rows: 1fr 7fr;\n            grid-template-columns: 1fr 1fr;\n\n            & .gradationBox {\n                grid-row: auto / span 2;\n                height: 100%;\n                background: radial-gradient(circle,rgb(50 236 50 / 77%) 0%,rgb(58 67 54 / 17%) 47%,rgb(255 255 255 / 0%) 100%);\n            }\n\n            ${device?.mobile} {\n                display: flex;\n                flex-direction: column;\n\n                & .gradationBox{\n                    padding: 20px;\n                    grid-row: none;\n                    height: 70%;\n                }\n            }\n\n            \n        `\n    }}\n    \n`\n\nconst CustomPostingList = styled.div`\n    ${({theme}) => {\n\n        const {colors} = theme;\n\n        return css`\n            width: 80%;\n            height: 100vh;\n            position: relative;\n            margin: 0 auto;\n            top: 10%;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        `\n    }}\n`\n\n\nexport const StyledPostingList = {\n    elements: {\n        CustomGridDiv,\n        CustomGridList,\n        CustomGridRightTitle,\n        CustomGridTitle,\n        CustomLanguageName\n    },\n    molecules: {\n        CustomGridRight,\n        CustomGridGradient\n    },\n    organisms:{\n        CustomPostingContainer\n    },\n    CustomPostingList\n}","import { Link } from \"gatsby\";\nimport React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { PostingListType, usePostingList } from \"../../../hooks/usePostingList\";\nimport { parameterNameState } from \"../../../recoil/PostingListParamName\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\n\n\nconst {CustomGridDiv, CustomGridList} = StyledPostingList.elements;\n\nconst GridList = () => {\n\n    const paramNameRecoil:string = useRecoilValue(parameterNameState);\n    const datas:PostingListType[] = usePostingList(paramNameRecoil);\n    \n\n    return (\n        <CustomGridDiv>\n            <CustomGridList>\n                {\n                    datas.map((data:PostingListType, index:number) => (\n                        <div key={index} className={'list'}>\n                            <Link to={`${data.frontmatter.slug}`}>\n                                {data.frontmatter.title}\n                            </Link>\n                        </div>\n                    ))\n                }\n            </CustomGridList>\n        </CustomGridDiv>\n    )\n}\n\nexport default GridList;\n","import React from \"react\";\nimport { ThemeEnums, themeMode } from \"../../../recoil/Theme\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport {useRecoilValue} from \"recoil\";\n\nconst {CustomGridTitle} = StyledPostingList.elements;\n\nconst GridTitle = () => {\n\n    const theme:ThemeEnums = useRecoilValue(themeMode);\n\n    return (\n        <CustomGridTitle mode={theme}>LIST</CustomGridTitle>\n    )\n}\n\nexport default GridTitle;","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface Props {\n    [propName: string]: string;\n}\n\n\nexport const CustomDiv = styled.div<Props>`\n    ${props => props};\n`","import React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { parameterNameState } from \"../../../recoil/PostingListParamName\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport { CustomDiv } from \"../../styledComponents/Styled\";\n\nconst {CustomGridRightTitle, CustomLanguageName} = StyledPostingList.elements;\n\n\nconst GridRightTitle = () => {\n\n    const name:string = useRecoilValue(parameterNameState);\n\n    return(\n        <>\n        <CustomGridRightTitle transform=\"top\" textAlign=\"end\">\n                <CustomDiv>WHAT I</CustomDiv>\n                <CustomDiv>\n                    LEARNED\n                </CustomDiv>\n        </CustomGridRightTitle>\n        <CustomGridRightTitle transform=\"bottom\" position=\"absolute\">\n            <CustomDiv>FROM</CustomDiv>\n            <CustomLanguageName>\n                {name.toUpperCase()}\n            </CustomLanguageName>\n        </CustomGridRightTitle>\n        </>\n    )\n}\n\nexport default GridRightTitle;","import React from \"react\";\nimport { ThemeEnums, themeMode } from \"../../../recoil/Theme\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport GridRightTitle from \"../element/GridRightTitle\";\nimport {useRecoilValue} from \"recoil\";\n\nconst {CustomGridRight, CustomGridGradient} = StyledPostingList.molecules;\n\nconst GridRight = () => {\n\n    const theme:ThemeEnums = useRecoilValue(themeMode);\n\n    return(\n        <CustomGridGradient className={theme === ThemeEnums.LIGHT ? 'light' : 'dark'}>\n            <CustomGridRight>\n            <GridRightTitle />\n            </CustomGridRight>\n        </CustomGridGradient>\n    )\n}\n\nexport default GridRight;\n","import React from \"react\";\nimport { StyledPostingList } from \"../../styledComponents/postingList/StyledPostingList\";\nimport GridList from \"../element/GridList\";\nimport GridTitle from \"../element/GridTitle\";\nimport GridRight from \"../molecules/GridRight\";\n\nconst {CustomPostingContainer} = StyledPostingList.organisms;\n\nconst PostingContainer = () => {\n\n    return (\n        <CustomPostingContainer>\n            <GridTitle></GridTitle>\n            <GridRight></GridRight>\n            <GridList></GridList>\n        </CustomPostingContainer>\n    )\n}\n\n\nexport default PostingContainer;","import React from \"react\";\nimport { StyledPostingList } from \"../styledComponents/postingList/StyledPostingList\";\nimport PostingContainer from \"./organisms/PostingContainer\";\n\nconst {CustomPostingList} = StyledPostingList;\n\nconst PostingList = () => {\n\n    return(\n        <CustomPostingList>\n             <PostingContainer></PostingContainer>\n        </CustomPostingList>\n    )\n}\n\nexport default PostingList;","import * as React from \"react\";\nimport { RecoilRoot, useRecoilState } from \"recoil\";\nimport Layout from \"../../components/layouts/Layout\";\nimport Main from \"../../components/layouts/Main\";\nimport PostingList from \"../../components/postingList/PostingList\";\nimport { parameterNameState } from \"../../recoil/PostingListParamName\";\n\ntype PropsType = {\n    params: {name: string},\n}\n\n\nconst PostingListIndexPage = ({ params }:PropsType) => {\n    const {name} = params;\n\n    const [paramName, setParamName] = useRecoilState(parameterNameState);\n    \n    React.useEffect(()=>{\n        setParamName(name);\n    })\n\n\n    return(\n        <Layout>\n            <Main height={'100vh'}>\n                <PostingList />\n            </Main>\n            </Layout>\n    )\n}\n\n\n\nexport default PostingListIndexPage;","import {atom, selector} from \"recoil\";\n\nexport const parameterNameState = atom({\n    key: 'parameterName',\n    default: ''\n});\n"],"names":["CustomMain","styled","children","height","React","usePostingList","parentFolder","useStaticQuery","allMarkdownRemark","nodes","filter","data","frontmatter","CustomGridDiv","theme","colors","device","css","defaultColor","mobile","CustomGridList","paddings","base","textColor","CustomGridRightTitle","props","transform","position","textAlign","fonts","size","_fonts$size","xl","_fonts$size2","lg","_fonts$size3","sm","CustomLanguageName","pointColor","StyledPostingList","elements","CustomGridTitle","mode","ThemeEnums","molecules","CustomGridRight","tablet","CustomGridGradient","organisms","CustomPostingContainer","CustomPostingList","paramNameRecoil","useRecoilValue","parameterNameState","datas","map","index","key","className","Link","to","slug","title","themeMode","CustomDiv","name","toUpperCase","GridRightTitle","GridTitle","GridRight","GridList","PostingContainer","params","useRecoilState","setParamName","Layout","Main","PostingList","atom","default"],"sourceRoot":""}